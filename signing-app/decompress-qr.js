#!/usr/bin/env node

/**
 * QR Code Decompression Utility
 * 
 * This script demonstrates how to decompress the QR code data
 * generated by the eth-signer-cli.ts script.
 * 
 * Usage:
 *   node decompress-qr.js <compressed_base64_data>
 * 
 * Example:
 *   node decompress-qr.js "H4sIAAAAAAAAA6tWyk..."
 */

const pako = require('pako');

function decompressQRData(compressedBase64) {
  try {
    console.log('🔍 Decompressing QR code data...');
    console.log(`📊 Input size: ${compressedBase64.length} characters`);
    
    // Convert base64 back to Uint8Array
    const compressed = Buffer.from(compressedBase64, 'base64');
    console.log(`📊 Compressed binary size: ${compressed.length} bytes`);
    
    // Decompress using gzip
    const decompressed = pako.ungzip(compressed);
    console.log(`📊 Decompressed size: ${decompressed.length} bytes`);
    
    // Convert back to string
    const originalData = new TextDecoder().decode(decompressed);
    
    // Parse and pretty-print the JSON
    const parsedData = JSON.parse(originalData);
    
    console.log('\n✅ Successfully decompressed!');
    console.log('\n📄 Decompressed Transaction Data:');
    console.log(JSON.stringify(parsedData, null, 2));
    
    return parsedData;
  } catch (error) {
    console.error('❌ Failed to decompress data:', error.message);
    console.log('\n💡 Make sure you copied the complete base64 string from the QR code');
    process.exit(1);
  }
}

// Main execution
if (require.main === module) {
  const args = process.argv.slice(2);
  
  if (args.length === 0) {
    console.log('🚀 QR Code Decompression Utility');
    console.log('================================');
    console.log('');
    console.log('Usage: node decompress-qr.js <compressed_base64_data>');
    console.log('');
    console.log('Example:');
    console.log('  node decompress-qr.js "H4sIAAAAAAAAA6tWyk..."');
    console.log('');
    console.log('💡 Copy the base64 string from the QR code generated by eth-signer-cli.ts');
    process.exit(1);
  }
  
  const compressedData = args[0];
  decompressQRData(compressedData);
}

module.exports = { decompressQRData };
